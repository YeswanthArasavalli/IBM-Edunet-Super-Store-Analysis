# -*- coding: utf-8 -*-
"""Analysis of Superstore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NrNr-LeqrFclofu_3gi_OXV9ve9LxmlP
"""

#Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import plotly.colors as colors
pio.templates.default = "plotly_white"

super = pd.read_csv('Analysis of Super Store - DA.csv')
super.head(2)

super.tail(2)

super.shape

duplicates = super[super.duplicated()]
duplicates

duplicates.shape

sup = super.drop_duplicates()
sup

sup.shape

sup.head(2)

sup.tail(2)

sup.info()

sup.describe()

sup.isna().sum()

sup['Category'].unique()

sup['Ship Mode'].unique()

#Visualation
def correlation_plot(data: pd.DataFrame = None):
  corr = sup.corr()
  corr.style.background_gradient(cmap='coolwarm')

sales_by_mode = sup.groupby('Ship Mode')['Sales'].sum().reset_index()
fig = px.pie(sales_by_mode,
             names='Ship Mode',
             values='Sales',
             title='Sales Analysis by Ship Mode')
fig.show()

#plot_categorical_distribution(data=sup, column="Category", aspect=1.5)
sales_by_category = sup.groupby('Category')['Sales'].sum().reset_index()
a = px.pie(sales_by_category,
             values='Sales',
             names='Category',
             hole=0.5,
             color_discrete_sequence=px.colors.qualitative.Pastel)
a

sales_by_segment = sup.groupby('Segment')['Sales'].sum().reset_index()
fig = px.pie(sales_by_segment,
             values='Sales',
             names='Segment',
             title='Sales Analysis by Segment')
fig.show()

sales_by_subcategory = sup.groupby('Sub-Category')['Sales'].sum().reset_index()
fig = px.bar(sales_by_subcategory,
             x='Sub-Category',
             y='Sales',
             title='Sales Analysis by Sub-Category')
fig.show()

sales_by_subcategory = sup.groupby('Sub-Category')['Profit'].sum().reset_index()
fig = px.bar(sales_by_subcategory,
             x='Sub-Category',
             y='Profit',
             title='Profit Analysis by Sub-Category')
fig.show()

sup.corr()

top_cities = sup.groupby("City")["Sales"].sum().nlargest(10)

plt.figure(figsize=(12, 4))

top_cities.plot(kind="bar")
plt.xlabel("City")
plt.ylabel("Sales Amount")
plt.title("Top 10 Cities with Highest Sales")

top_states = sup.groupby("City")["Profit"].sum().nlargest(10)

plt.figure(figsize=(12, 4))

top_states.plot(kind="bar")
plt.xlabel("Cities")
plt.ylabel("Profit Amount")
plt.title("Top 10 Cities with Highest Profits")

colors = ['red','orange','yellow', 'gold', 'green', 'green','blue','blue','blue','blue']
sup.groupby('State')['Sales'].sum().sort_values(ascending=False).head(10).plot.barh(color=colors)
plt.title(label="Top 10 States by Sales");

sup.groupby('State')['Profit'].sum().sort_values(ascending=False).head(10).plot.barh(color=colors)
plt.title(label="Top 10 States by Profits");

sup.groupby('Sub-Category')['Sales'].sum().sort_values(ascending=False).head(10).plot.barh(color=colors)
plt.title(label="Top 10 Sub Categories by Saless");

sup.groupby('Sub-Category')['Profit'].sum().sort_values(ascending=False).head(10).plot.barh(color=colors)
plt.title(label="Top 10 Sub-Categories by Profits");

sales_profit_by_segment = sup.groupby('Segment').agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()
fig = go.Figure()
fig.add_trace(go.Bar(x=sales_profit_by_segment['Segment'],
                     y=sales_profit_by_segment['Sales'],
                     name='Sales'))
fig.add_trace(go.Bar(x=sales_profit_by_segment['Segment'],
                     y=sales_profit_by_segment['Profit'],
                     name='Profit'))

fig.update_layout(title='Sales and Profit Analysis by Customer Segment',
                  xaxis_title='Customer Segment', yaxis_title='Amount')

fig.show()

sales_profit_by_segment = sup.groupby('Category').agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()
fig = go.Figure()
fig.add_trace(go.Bar(x=sales_profit_by_segment['Category'],
                     y=sales_profit_by_segment['Sales'],
                     name='Sales'))
fig.add_trace(go.Bar(x=sales_profit_by_segment['Category'],
                     y=sales_profit_by_segment['Profit'],
                     name='Profit'))

fig.update_layout(title='Sales and Profit Analysis by Category',
                  xaxis_title='Category', yaxis_title='Amount')

fig.show()

sales_profit_by_segment = sup.groupby('Segment').agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()
sales_profit_by_segment['Sales_to_Profit_Ratio'] = sales_profit_by_segment['Sales'] / sales_profit_by_segment['Profit']
print(sales_profit_by_segment[['Segment', 'Sales_to_Profit_Ratio']])